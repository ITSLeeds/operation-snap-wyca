---
title: "Road User video evidence of road traffic offences: Preliminary analysis of Operation Snap data and suggestions for a research agenda"
bibliography: [references.bib, opsnap.bib]
editor:
  markdown: 
    wrap: sentence
# keywords: 
#   - Road safety
#   - Video evidence
#   - Near misses
#   - Operation Snap
#   - Dangerous driving
#   - Antisocial driving
date: last-modified
format:
  # html: default
  # docx: default
  # pdf: default
  arxiv-pdf:
    keep-tex: true
# linenumbers: true # Add (continuous) line numbers?
# doublespacing: false # Double space the PDF output?
# runninghead: "Preprint" # The text on the top of each page of the output
# authorcols: true # Should authors be listed in a single column (default) or in multiple columns (`authorcols: true`)
execute: 
  echo: false
  warning: false
  cache: false
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  warning = FALSE
)
```

```{r}
#| eval: false
#| echo: false
# quarto::quarto_render("paper.qmd", output_format = "pdf")
# file.copy("paper.pdf", "~/OneDrive/opsnap_leeds/paper-no-line-numbers-v12.pdf")
# quarto::quarto_render("paper.qmd", output_format = "arxiv-pdf")
# file.copy("paper.pdf", "paper-v12.pdf")
# file.copy("paper.pdf", "~/OneDrive/opsnap_leeds/paper-v12.pdf")
# quarto::quarto_render("paper.qmd", output_format = "docx")
# # file.copy("paper.docx", "~/OneDrive/opsnap_leeds/paper-v12.docx")
# file.copy("paper.docx", "paper-v12.docx")
# quarto::quarto_render("title.qmd", output_format = "arxiv-pdf")
# browseURL("title.pdf")
# system("gh release upload v1 --clobber paper-v12.docx")
# browseURL("paper.docx")
# # Install extension:
# system("quarto install extension mikemahoney218/quarto-arxiv")
# system("sudo apt install lmodern")
```

```{r setup}
#| include: false
devtools::load_all()
```

```{r}
#| include: false
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
library(tidyverse)
library(gt)
library(gtExtras)
remotes::install_github("ITSLeeds/opsnap")
```

```{r}
#| include: false
#| echo: false
devtools::load_all()
```

```{r}
#| echo: false
#| eval: false
library(rvest)
query = ".file-link a"
url = "https://www.westyorkshire.police.uk/SaferRoadsSubmissions"
files_available = read_html(url) |>
  html_nodes(query) |>
  html_text()
links_available = read_html(url) |>
  html_nodes(query) |>
  html_attr("href")
urls = paste0("https://www.westyorkshire.police.uk", links_available)
file_names = basename(links_available)
tibble::tibble(file_names) |>
  knitr::kable()
```

```{r}
#| include: false
# In preparation for reading-in all data:
# date_str = format(Sys.Date(), "%Y-%m")
date_str = format(as.Date("2024-04-01"), "%Y-%m")
file_name = paste0("data/west-yorkshire/operation_snap_", date_str, ".csv")
```

```{r}
#| eval: false
#| echo: false
# Download them to raw_data/west-yorkshire:
dir.create("raw_data/west-yorkshire", recursive = TRUE, showWarnings = FALSE)
pbapply::pblapply(urls, function(u) {
  download.file(u, paste0("raw_data/west-yorkshire/", basename(u)))
})

# Test with 2nd url:
u = urls[2]
d2 = opsnap:::download_and_read(u)
d_all = purrr::map_df(urls, opsnap:::download_and_read)
dir.create("data/west-yorkshire", recursive = TRUE, showWarnings = FALSE)
# Date to nearest month:
write_csv(d_all, file_name)
```

<!-- The data is open acess and looks like this, with names cleaned up by the package: -->

```{r}
#| eval: false
#| echo: true
#| include: false
u = "https://www.westyorkshire.police.uk/sites/default/files/2024-01/operation_snap_oct-dec_2023_0.xlsx"
d = opsnap:::download_and_read(u)
# Old names:
#  [1] "REPORTER TRANSPORT MODE" "OFFENDER VEHICLE MAKE"  
#  [3] "OFFENDER VEHICLE MODEL"  "OFFENDER VEHICLE COLOUR"
#  [5] "OFFENCE"                 "DISTRICT"               
#  [7] "DISPOSAL"                "DATE OF SUBMISSION"     
#  [9] "...9"                    "OFF LOCATION"
# New names:
# [1] "mode"     "make"     "model"    "colour"   "offence"  "district" "disposal"
# [8] "date"     "location"
```

<!-- The data looks like this (first 3 rows shown): -->

```{r}
#| echo: false
#| include: false
file_exists = file.exists(file_name)
if (!file_exists) {
  # stop("try downloading the data first!")
  u = "https://github.com/ITSLeeds/opsnap/releases/download/v1/operation_snap_2024-04.csv"
  f = basename(u)
  download.file(url = u, destfile = f)
  dir.create("data/west-yorkshire", recursive = TRUE)
  file.copy(f, "data/west-yorkshire/")
}
d_all = read_csv(file_name)
d_all = d_all |>
  mutate(
    mode = tolower(mode),
    offence = tolower(offence),
    disposal = tolower(disposal),
    # First word of text in offence column:
    offence_code = str_extract(offence, "\\w+")
  )
d_all |>
  head(3) |>
  # Convert column names to title case:
  rename_all(snakecase::to_title_case) |>
  # snakecase::to_title_case
  knitr::kable()
```

```{r}
d_all_monthly = d_all |>
  mutate(month = lubridate::floor_date(date, "month")) |>
  group_by(month) |>
  summarise(n = n()) |>
  mutate(records = "all")
d_offence = d_all |>
  opsnap:::filter_offence_nas()
# table(d_offence$offence) |> sort() |> tail()
#                         rv86019 use a handheld phone / device whilst driving a motor vehicle on a road 
#                                                                                                    357 
#                                  rt88966 motor vehicle fail to comply with endorsable s36 traffic sign 
#                                                                                                    411 
#                                                          rt88971 fail to comply with red traffic light 
#                                                                                                    679 
# rt88975 drive motor vehicle fail to comply with red / green arrow / lane closure traffic light signals 
#                                                                                                   1364 
#                                                           rt88575 drive without due care and attention 
#                                                                                                   2917 
#                                               rt88576 drive without reasonable consideration to others 
#                                                                                                   4992 
d_offence_monthly = d_offence |>
  mutate(month = lubridate::floor_date(date, "month")) |>
  group_by(month) |>
  summarise(n = n()) |>
  mutate(records = "with_offence")
d_with_location = d_all |>
  opsnap:::filter_location_nas()
d_complete = d_offence |>
  opsnap:::filter_location_nas()
d_complete_monthly = d_complete |>
  mutate(month = lubridate::floor_date(date, "month")) |>
  group_by(month) |>
  summarise(n = n()) |>
  mutate(records = "complete")
d_monthly = bind_rows(d_all_monthly, d_complete_monthly)
# d_monthly = bind_rows(d_all_monthly, d_offence_monthly, d_complete_monthly)
```

```{r}
#| label: stats19
#| include: false
# years = 2021:2022
# dir.create("data/stats19", recursive = TRUE, showWarnings = FALSE)
# collisions_2022 = stats19::get_stats19(year = 2022)
# collisions_2021 = stats19::get_stats19(year = 2021)
# collisions_2020 = stats19::get_stats19(year = 2020)
# collisions = bind_rows(collisions_2020, collisions_2021, collisions_2022)
# write_csv(collisions, "collisions_2020-2022.csv")
# piggyback::pb_upload("collisions_2020-2022.csv")
system("gh release download v1")
collisions = read_csv("collisions_2020-2022.csv")
stats19_monthly = collisions |>
  filter(police_force == "West Yorkshire") |>
  mutate(month = lubridate::floor_date(date, "month")) |>
  group_by(month) |>
  summarise(n = n()) |>
  mutate(records = "stats19")

table(d_all$mode)

table(d_all$mode)

          # cyclist       horse rider      motorcyclist        pedestrian 
          #    7069               456                50              1467 
          # unknown    vehicle driver vehicle passenger 
          #     526             10145               650 

perc_vehicle_driver = d_all |>
  count(mode) |>
  filter(mode == "vehicle driver") |>
  pull(n) / nrow(d_all) * 100 
perc_cyclist = d_all |>
  count(mode) |>
  filter(mode == "cyclist") |>
  pull(n) / nrow(d_all) * 100 
perc_pedestrian = d_all |>
  count(mode) |>
  filter(mode == "pedestrian") |>
  pull(n) / nrow(d_all) * 100
perc_horse = d_all |>
  count(mode) |>
  filter(mode == "horse rider") |>
  pull(n) / nrow(d_all) * 100
perc_motorcyclist = d_all |>
  count(mode) |>
  filter(mode == "motorcyclist") |>
  pull(n) / nrow(d_all) * 100
perc_other = 100 - perc_vehicle_driver - perc_cyclist - perc_pedestrian - perc_horse - perc_motorcyclist

# table(d_all$disposal)
#  conditional offer              court dsit investigation educational course 
#               2563                321                202              10887 
#               fine                nfa  rpu investigation 
#                  1               6365                 24 

perc_disposal_educational_course_conditional = d_all |>
  mutate(disposal = case_when(
    disposal == "conditional offer" ~ "educational course",
    TRUE ~ disposal
  )) |>
  count(disposal) |>
  filter(disposal == "educational course") |>
  pull(n) / nrow(d_all) * 100
# Just educational:
perc_disposal_educational = d_all |>
  count(disposal) |>
  filter(disposal == "educational course") |>
  pull(n) / nrow(d_all) * 100
perc_disposal_conditional = d_all |>
  count(disposal) |>
  filter(disposal == "conditional offer") |>
  pull(n) / nrow(d_all) * 100
perc_disposal_court = d_all |>
  count(disposal) |>
  filter(disposal == "court") |>
  pull(n) / nrow(d_all) * 100
perc_undergoing_further_investigation = d_all |>
  count(disposal) |>
  filter(disposal == "undergoing further investigation") |>
  pull(n) / nrow(d_all) * 100
perc_no_further_action = d_all |>
  count(disposal) |>
  filter(disposal == "no further action") |>
  pull(n) / nrow(d_all) * 100
perc_course = d_all |>
  count(disposal) |>
  filter(disposal == "conditional offer") |>
  pull(n) / nrow(d_all) * 100
date_range = range(d_all$date)
# Crashes in 2024:
d_all_2024 = d_all |>
  filter(date >= "2024-01-01")
table(d_all_2024$date)
```

# Abstract {.unnumbered}

This study uses data from Operation Snap (OpSnap), the UK police's national system to receive road users' video evidence of road traffic offences.
Data from one police force area for 39 months (January 2021 to March 2024) <!-- (N= 18,363 records) --> (N = `r nrow(d_all) |> scales::number(big.mark = ",")` records) is analysed.
<!-- Of submitted cases, 49.9% were from vehicle drivers, 34.4% were from cyclists, and 7.4% were from pedestrians. --> Half were submitted by vehicle drivers (`r round(perc_vehicle_driver, 1)`%), a third by cyclists (`r round(perc_cyclist, 1)`%), `r round(perc_pedestrian, 1)`% by pedestrians, `r round(perc_horse, 1)`% by horse riders, `r round(perc_motorcyclist, 1)`% by motorcyclists, and `r round(perc_other, 1)`% were unknown.
We estimate that, relative to road distance travelled, cyclists were 20 times more likely to submit video evidence than vehicle drivers.
The most common offences overall were driving 'without reasonable consideration to others' or 'without due care and attention'.
<!-- Two thirds (66.1%) of reported cases resulted in the recommended disposal of an educational course (including conditional offers), 31% no further action, and fewer than 1% for court appearance. --> Half (`r round(perc_disposal_educational, 1)`%) of reported cases resulted in the recommended disposal of an educational course, `r round(perc_no_further_action, 1)`% no further action `r round(perc_disposal_conditional, 1)`% conditional offer, and `r round(perc_disposal_court, 1)`% resulted in court appearance.
A research agenda using OpSnap data is outlined that could emerge if national datasets are compiled and responsibly opened-up and made available for research and policy-making: data-driven research should identify hotspot locations and other correlates of dangerous and antisocial road use at regional, and local levels; research projects should investigate disposal-related decision-making, video quality, and the role of supporting evidence; offence concentration (recidivism, repeat submitters of evidence, spatial hotspots) and case progression including court cases should be explored with reference to new video evidence.
We conclude that datasets derived from publicly-uploaded video submission portals have the potential to transform evidence-based policy and practice locally, nationally and internationally. 
